package trans.server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Logger;

public class Server
{
	private static ExecutorService executorService;
	private static Logger logger;
	
	public static void main(String[] args) throws Exception
	{
		// 1. 초기 설정
		// 설정 파일, 로그 설정 파일
		Setting setting = new Setting();
		setting.loadProperties();
		setting.loadLogProperties();
		
		// Logger 객체
		logger = setting.getLogger();
		
		// 스레드 풀 설정
		executorService = Executors.newFixedThreadPool(setting.getMaxThread());
		
		// 2. ServerSocket open
		ServerSocket serverSocket = new ServerSocket();
		try
		{
			serverSocket.bind(new InetSocketAddress(setting.getIp(), setting.getPort()));
			
		} catch (IOException e) {
			e.printStackTrace();
			
			if (serverSocket != null)
			{
				if(!serverSocket.isClosed())
				{
					try
					{
						serverSocket.close();
					} catch (IOException e1)
					{
						e1.printStackTrace();
					}
				}
			}
		}
		
		// 3. 연결 대기 및 socket open
		while(true)
		{
			try
			{
				System.out.println("[연결 기다림]");
				Socket socket = serverSocket.accept();
				InetSocketAddress isa = (InetSocketAddress) socket.getRemoteSocketAddress();
				System.out.println("[연결 수락함] " + isa.getHostName());
				
				// 4. 작업용 객체 생성
				ReceivingFile rf = new ReceivingFile(socket, setting.getSourcePath(), logger);
				
				// 5. 저장 디렉토리 존재 유무. 없으면 디렉토리 생성
				rf.existDir(setting.getSourcePath());
				
				//
				executorService.submit(new Runnable()
				{
					@Override
					public void run()
					{
						rf.receiveFile();
					}
				});
				System.out.println("[데이터 받기 성공]");
			} catch (IOException e)
			{
				e.printStackTrace();
			}
		}
	}
}
