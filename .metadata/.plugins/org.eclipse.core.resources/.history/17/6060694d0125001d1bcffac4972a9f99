package trans.server;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class Receive
{
	InputStream is;
	BufferedInputStream bis;
	DataInputStream dis;
	FileOutputStream fos;
	BufferedOutputStream bos;
	
	
	
	public Receive (InputStream is)
	{
		this.is = is;
		this.bis = null;
		this.dis = null;
		this.fos = null;
		this.bos = null;
	}
	
	public void existDir(String source)
	{
		File file = new File(source);
		
		if (!file.exists())
			file.mkdirs();
	}
	
	public void openMinStream()
	{
		bis = new BufferedInputStream(is);
		dis = new DataInputStream(bis);
		
		
	}
	
	public void copy(String currentPath)
	{
		File file = new File(currentPath);
		
		if (!file.isDirectory())
		{
			try
			{
				bis = new BufferedInputStream(is);
				dis = new DataInputStream(bis);
				
				fos = new FileOutputStream(file);
				bos = new BufferedOutputStream(fos);
				
				
				String fileName = dis.readUTF();
				long fileSize = dis.readLong();
				
				System.out.println(fileName);
				System.out.println(fileSize);
				
				int data = -1;
				
				byte[] bytes = new byte[1024];
				
				while ((data = dis.read(bytes)) != -1)
				{
					bos.write(bytes, 0, data);
				}
				bos.flush();
				
				System.out.println("클라이언트와 파일 이름이 같은가? "+fileName.equals(file.getName()));
				System.out.println("클라이언트와 파일 크기가 같은가? "+ (fileSize==file.length()));
				
			} catch (FileNotFoundException e)
			{
				
			} catch (IOException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				closeStream();
			}
		}
	}
	
	public void closeStream()
	{
		try
		{
			if(dis != null) dis.close();
			if(bis != null)	bis.close();
			//if(is != null)	is.close();
			
			if(bos != null)	bos.close();
			if(fos != null)	fos.close();
			
		} catch (IOException e)
		{
			System.out.println(e.toString());
		}
	}
}
