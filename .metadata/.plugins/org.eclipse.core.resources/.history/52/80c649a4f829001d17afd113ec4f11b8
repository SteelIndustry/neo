package trans.client;

import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.logging.Logger;

public class ClientTask
{
	private String source, ip;
	private int port;
	private ExecutorService executorService;
	private Logger logger;
	private Setting setting;
	
	public ClientTask (String sourcePath, String ip, int port, Logger logger, ExecutorService executorService)
	{
		this.source = sourcePath;
		this.ip = ip;
		this.port = port;
		this.executorService = executorService;
		this.logger = logger;
	}
	
	public ClientTask(Setting setting, Logger logger, ExecutorService executorService)
	{
		this.setting = setting;
		this.logger = logger;
		this.executorService = executorService;
	}
	
	public void existDir()
	{
		File file = new File(source);
		
		if (!file.exists())
		{
			file.mkdirs();
			StringBuffer sb = new StringBuffer();
			sb.append("make dir ");
			sb.append(source);
			logger.info(sb.toString());
		}
			
	}
	
	public void task(String path)
	{
		File[] list = search(path);
		
		for(File file : list)
		{
			String shortPath = getShortPath(path, file.getName());
			
			if (file.isDirectory())
				task(shortPath);
			else
			{
				boolean deleteCheck = send(file, shortPath);
				if (deleteCheck)
					file.delete();
			}
		}
	}
	
	public File[] search(String path)
	{
		return new File(getAccuratePath(path)).listFiles();
	}
	
	public boolean send(File file, String path)
	{
		if (file.isDirectory())
		{
			
		}
		else
		{
			
		}
		
		ArrayList<String> abc = new ArrayList<String>();
		
		synchronized (abc)
		{
			
		}
		
		return false;
	}
	
	// 파일 탐색 및 전송
	public void searchAndSend()
	{
		searchAndSend("");
	}
	
	// 파일 탐색
	private void searchAndSend(String path)
	{
		File source = new File(getAccuratePath(path));
		File[] contents = source.listFiles();
		
		// 빈(empty) 폴더 탐지 용도 if
		if (contents.length == 0)
		{
			// 빈 폴더 이름 전달
			executorService.submit(new Runnable()
			{
				@Override
				public void run()
				{
					SendingFile sending = new SendingFile(path, ip, port, source, logger);
					sending.sendTask();
					
					StringBuffer sb = new StringBuffer(source.getName());
					sb.append(" 빈 폴더 이름 전달");
					logger.info(sb.toString());
				}
			});
			return;
		}
		
		// 일반적인 파일 탐색
		for (File file : contents)
		{
			// 파일 일 때
			if(!file.isDirectory())
			{
				Runnable task = new Runnable()
				{
					@Override
					public void run()
					{
						System.out.println(Thread.currentThread().getName() + " 작업 시작");
						
						// 파일 전송
						SendingFile sending = new SendingFile( getShortPath( path, file.getName() )
													, ip, port, file, logger);
						boolean check = sending.sendTask();
						
						StringBuffer sb = new StringBuffer(file.getName());
						sb.append(" 파일 전송");
						
						// 파일 전송 성공했으면 삭제
						if (check)
						{
							//file.delete();
							sb.append(" 후 디렉토리에서 삭제");
						}
						logger.info(sb.toString());
						System.out.println(file.getPath() + " 전송");
					}
				};
				executorService.submit(task);
			}
			// 폴더 일 때, 폴더 진입해서 새로운 탐색 실행
			else
			{
				String newPath = new StringBuffer(path)
						.append("/").append(file.getName()).toString();
				searchAndSend(newPath);
			}			
		}
	}

	// 빈 폴더 정리
	public void delete()
	{
		File sourceFolder = new File(source);
		File[] contents = sourceFolder.listFiles();
		
		for (File file : contents)
		{
			if (file.exists())
			{
				if ( file.isDirectory() )
					delete(file.getPath());
			}			
		}
	}
	public void delete(String path)
	{
		File sourceFolder = new File(path);
		File[] contents = sourceFolder.listFiles();
				
		for (File file : contents)
		{
			if (file.exists())
			{
				if ( file.isDirectory() )
					delete(file.getPath());
			}			
		}
		if (sourceFolder.list().length == 0)
		{
			if (sourceFolder.exists())
			{
				if (sourceFolder.delete())
				{
				}
			}
		}	
	}
	
	// source: C:/TMTest/source
	// file path: C:/TMTest/source/folder1/text.txt
	// 일 때, path = "/folder1/text.txt"로 설정하여 search(String path)의 파라미터로 넘겨줌.
	// 따라서 실제 주소가 필요함
	public String getAccuratePath(String path)
	{
		return new StringBuffer(source).append(path).toString();		
	}
	
	public String getShortPath(String path, String fileName)
	{
		return new StringBuffer(path).append("/").append(fileName).toString();
	}
}
