package trans.server;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URLDecoder;
import java.util.Properties;

import trans.client.Client;

public class Server
{
	public static String sourcePath, ip;
	public static int port;
	
	private static ServerSocket serverSocket;
	
	public static void main(String[] args)
	{
		// 1. 설정 파일 불러오기
		loadProperties();
		
		
		String sourcePath = "C:/TMTest/dest";
		
		try
		{
			serverSocket = new ServerSocket();
			serverSocket.bind(new InetSocketAddress("localhost", 10304));
			
			
			while (true)
			{
				System.out.println("[연결 기다림]");
				Socket socket = serverSocket.accept();
				InetSocketAddress isa = (InetSocketAddress) socket.getRemoteSocketAddress();
				System.out.println("[연결 수락함] " + isa.getHostName());
				
				
				//InputStream is = socket.getInputStream();
				
				/*
				bytes = new byte[100];
				int readByteCount = is.read(bytes);
				message = new String(bytes, 0, readByteCount, "UTF-8");
				*/
				
				//System.out.println("[데이터 받기 성공]: " + message);
				
				ServerProcess receive = new ServerProcess(socket, sourcePath);
				receive.existDir(sourcePath);
				
				receive.existDir("C:/TMTest/dest");
				
				receive.getInfo();
				
				System.out.println("[데이터 받기 성공]");
				
				//is.close();
				
				/*
				OutputStream os = socket.getOutputStream();
				message = "Hello Client";
				bytes = message.getBytes("UTF-8");
				os.write(bytes);
				os.flush();
				System.out.println("[데이터 보내기 성공]");
				
				is.close();
				os.close();
				
				*/
				//socket.close();
				receive.closeSocket();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		finally {
			if(!serverSocket.isClosed())
			{
				try
				{
					serverSocket.close();
				} catch (IOException e)
				{
					e.printStackTrace();
				}
			}
		}
	}
	
	public static void loadProperties() throws Exception
	{
		String propertiesPath = Server.class.getResource("server.properties").getPath();
		Properties properties = new Properties();
		
		try
		{
			propertiesPath = URLDecoder.decode(propertiesPath, "utf-8");
			properties.load(new FileInputStream(propertiesPath));
			
		} catch (FileNotFoundException e)
		{
			e.printStackTrace();
			System.out.println("설정 파일 오류");
			throw new Exception();
		}
		
		sourcePath = properties.getProperty("path");
		port = Integer.parseInt(properties.getProperty("port"));
		ip = properties.getProperty("ip");
	}
}
