package trans.client;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.URLDecoder;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;


public class Client
{
	private static String sourcePath, ip;
	private static int port, maxThread;
	private static ExecutorService executorService;
	private static ThreadPoolExecutor threadPoolExecutor;
	private static Logger LOG;
	
	public static void main(String[] args) throws Exception
	{
		//long start, end;
		//start = System.currentTimeMillis();
		
		// 1. 초기 설정
		// 설정 파일, 로그 설정 파일
		Setting setting = new Setting();
		setting.loadProperties();
		setting.loadLogProperties();
		
		
		LOG = setting.getLogger();
		
		//loadProperties();
		//loadLogProperties();
		
		// 스레드 풀
		threadPoolExecutor = new ThreadPoolExecutor(
			setting.getMaxThread()
			, Runtime.getRuntime().availableProcessors()
			, 10L
			, TimeUnit.SECONDS
			, new SynchronousQueue<Runnable>()
		); 
		executorService = threadPoolExecutor;
		
		// 2. 전송용 클래스		
		Process transfer = new Process(setting.getSourcePath(), setting.getIp(), setting.getPort());
		
		// 3. 디렉토리 유무 탐색
		transfer.existDir();
		
		LOG.warning("warning log");
		
		// 4. 파일 탐색 및 전송
		executorService.submit(new Runnable()
		{
			@Override
			public void run()
			{
				transfer.search(executorService);
			}
		});
		
		// 우연한 종료를 막기 위한 안전장치
		Thread.sleep(5000);
		
		int count = threadPoolExecutor.getActiveCount();
		
		while (count != 0)
		{
			count = threadPoolExecutor.getActiveCount();
		}
		
		if (!executorService.isShutdown())
			executorService.shutdown();
		
		transfer.delete();
		
		System.out.println("[데이터 보내기 loop 종료]");
		
		//end = System.currentTimeMillis();
		//System.out.println(end-start+"ms");
	}
	
	public static void loadProperties() throws Exception
	{
		String propertiesPath = Client.class.getResource("client.properties").getPath();
		Properties properties = new Properties();
		
		try
		{
			propertiesPath = URLDecoder.decode(propertiesPath, "utf-8");
			properties.load(new FileInputStream(propertiesPath));
			
		} catch (FileNotFoundException e)
		{
			e.printStackTrace();
			System.out.println("설정 파일 오류");
			throw new Exception();
		}
		
		sourcePath = properties.getProperty("path");
		port = Integer.parseInt(properties.getProperty("port"));
		ip = properties.getProperty("ip");
		if (properties.getProperty("maxThread").equals("default"))
			maxThread = 3;
		else
		{
			maxThread = (maxThread > Runtime.getRuntime().availableProcessors())
				? maxThread = Runtime.getRuntime().availableProcessors()
					: Integer.parseInt(properties.getProperty("maxThread"));
		}
		
		checkValidation();
	}
	
	public static void loadLogProperties() throws Exception
	{
		LogSetting log = new LogSetting();
				
		String propertiesPath = Client.class.getResource("log.properties").getPath();
		Properties properties = new Properties();
		
		try
		{
			propertiesPath = URLDecoder.decode(propertiesPath, "utf-8");
			properties.load(new FileInputStream(propertiesPath));
			
		} catch (FileNotFoundException e)
		{
			e.printStackTrace();
			System.out.println("로그 설정 파일 오류");
			throw new Exception();
		}
		
		String logPath = properties.getProperty("path");
		
		String logLevel = properties.getProperty("level");
		
		Level level;
		
		switch (logLevel)
		{
			case "SERVERE":
				level = Level.SEVERE;
				break;
			case "WARNING":
				level = Level.WARNING;
				break;
			case "INFO":
				level = Level.CONFIG;
				break;
			case "FINE":
				level = Level.FINE;
				break;
			case "FINER":
				level = Level.FINER;
				break;
			case "FINEST":
				level = Level.FINEST;
				break;
			default:
				level = Level.INFO;
				break;
		}
		
		log.setLog(logPath, level);
		
		LOG = log.getLogger();
		
	}
	
	private static void checkValidation()
	{
		System.out.println("원본 디렉토리, 포트 번호, ip 유효성 검사 하는 곳");
	}
}
