package trans.client;

import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.logging.Logger;

public class Procedure
{
	private String source, ip;
	private int port;
	private ExecutorService executorService;
	private Logger logger;
	
	public Procedure (String sourcePath, String ip, int port, Logger logger, ExecutorService executorService)
	{
		this.source = sourcePath;
		this.ip = ip;
		this.port = port;
		this.executorService = executorService;
		this.logger = logger;
	}
	
	public void existDir()
	{
		File file = new File(source);
		
		if (!file.exists())
			file.mkdirs();
	}
	
	// 파일 탐색
	public void search()
	{ 
		search(""); 
	}
	
	// 파일 탐색
	private void search(String path)
	{
		File source = new File(getAccuratePath(path));
		File[] contents = source.listFiles();
		
		// 빈(empty) 폴더(빈 디렉토리) 용 if
		if (contents.length == 0)
		{
			// 빈 폴더 이름 전달
			executorService.submit(new Runnable()
			{
				@Override
				public void run()
				{
					new SendFile(path, ip, port, source).sendTask();
				}
			});
			return;
		}
		
		for (File file : contents)
		{
			// 파일 일 때
			if(!file.isDirectory())
			{
				Runnable task = new Runnable()
				{
					@Override
					public void run()
					{
						// 파일 전송 후 성공했으면 삭제
						boolean check = false;
						check = new SendFile(getShortPath(path, file.getName())
									, ip, port, file).sendTask();
						if (check)
						{
							if(file.delete())
								System.out.println("빈 폴더 삭제 성공");
						}
					}
				};
				executorService.submit(task);
			}
			// 폴더 일 때, 폴더 진입해서 새로운 search 실행
			else
			{
				String newPath = new StringBuffer(path)
						.append("/").append(file.getName()).toString();
				search(newPath);
			}			
		}
	}

	// 빈 폴더 정리
	public void delete()
	{
		File sourceFolder = new File(source);
		File[] contents = sourceFolder.listFiles();
		
		for (File file : contents)
		{
			if (file.exists())
			{
				if ( file.isDirectory() )
					delete(file.getPath());
			}			
		}
	}
	public void delete(String path)
	{
		File sourceFolder = new File(path);
		File[] contents = sourceFolder.listFiles();
				
		for (File file : contents)
		{
			if (file.exists())
			{
				if ( file.isDirectory() )
					delete(file.getPath());
			}			
		}
		if (sourceFolder.list().length == 0)
		{
			if (sourceFolder.exists())
			{
				if (sourceFolder.delete())
				{
				}
			}
		}	
	}
	
	// source: C:/TMTest/source
	// file path: C:/TMTest/source/folder1/text.txt
	// 일 때, path = "/folder1/text.txt"로 설정하여 search(String path)의 파라미터로 넘겨줌.
	// 따라서 실제 주소가 필요함
	public String getAccuratePath(String path)
	{
		return new StringBuffer(source).append(path).toString();		
	}
	
	public String getShortPath(String path, String fileName)
	{
		return new StringBuffer(path).append("/").append(fileName).toString();
	}
}
