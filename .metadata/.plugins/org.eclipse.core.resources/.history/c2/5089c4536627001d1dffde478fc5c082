package trans.client;

import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

public class Process
{
	private String source, ip;
	private int port;
	private ExecutorService executorService;
	private ArrayList<String> delList;
	
	public Process (String sourcePath, String ip, int port, ArrayList<String> delList)
	{
		this.source = sourcePath;
		this.ip = ip;
		this.port = port;
		this.delList = delList;
	}
	
	public void existDir()
	{
		File file = new File(source);
		
		if (!file.exists())
			file.mkdirs();
	}
	
	// 파일 탐색
	public boolean search(ExecutorService executorService)
	{ 
		this.executorService = executorService;
		return search(""); 
	}
	
	// 파일 탐색
	private boolean search(String path)
	{
		boolean delCheck = false;
		
		File source = new File(getAccuratePath(path));
		File[] contents = source.listFiles();
		
		// 빈(empty) 폴더(빈 디렉토리) 용 if
		if (contents.length == 0)
		{
			// 빈 폴더 이름 전달
			Callable<Boolean> task = new Callable<Boolean>()
			{
				@Override
				public Boolean call() throws Exception
				{
					boolean deleteCheck = new SendFile(path, ip, port, source).sendTask();
					
					if (deleteCheck)
					{
						delList.add(source.getPath());
					}
					return deleteCheck;
				}
			};
			
			Future<Boolean> future = executorService.submit(task);
			
			try
			{
				return future.get();
			} catch (InterruptedException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally
			{
				return delCheck;
			}
		}
		
		for (File file : contents)
		{
			if(!file.isDirectory())
			{
				Runnable runnable = new Runnable()
				{
					@Override
					public void run()
					{
						// 파일 전송 후 성공했으면 삭제
						boolean deleteCheck = false;
						deleteCheck = new SendFile(getShortPath(path, file.getName()), ip, port, file)
										.sendTask();
						if (deleteCheck)
						{
							if (file.delete())
								System.out.println("성공");
						}
							
					}
				};
				executorService.submit(runnable);
			}
			else
			{
				String newPath = new StringBuffer(path)
						.append("/").append(file.getName()).toString();
				
				search(newPath);
				
				File newFile = new File(newPath);
				if (newFile.listFiles().length == 0)
					newFile.delete();
			}			
		}
		
		if (source.listFiles().length == 0)
		{
			if(source.delete())
				System.out.println("빈 폴더 삭제 성공");
			else
				System.out.println("실패");
		}
	}
	
	// source: C:/TMTest/source
	// file path: C:/TMTest/source/folder1/text.txt
	// 일 때, path = "/folder1/text.txt"로 설정하여 search(String path)의 파라미터로 넘겨줌.
	// 따라서 실제 주소가 필요함
	public String getAccuratePath(String path)
	{
		return new StringBuffer(source).append(path).toString();		
	}
	
	public String getShortPath(String path, String fileName)
	{
		return new StringBuffer(path).append("/").append(fileName).toString();
	}
}
